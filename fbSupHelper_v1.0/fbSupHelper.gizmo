#! C:/software/x86-64/nuke/11.3.6/nuke-11.3.6.dll -nx
version 11.3 v6
Group {
 name SupHelper
 inputs 0
 knobChanged "##################################################################\n### Returns list with shots containing renders.\n###\n### @param sequencePath Path of the project files.\n### @return shotsReturn shots with renders.\n##################################################################\ndef getShots(sequence, sequencePath):\n    \n    toReplace = sequence + \"_\"\n    shotsDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\n    shotsReturn = \[]\n    \n    if os.path.isdir(sequencePath):\n        shots = os.listdir(sequencePath)\n        set1 = set(shots)\n        set2 = set(shotsDelete)\n        shots = list(set1 - set2)\n        # print(shots)\n        \n        # SHOTS #\n        for shot in shots:\n            # print(shot)\n            \n            shotPath = sequencePath + shot + \"/\"\n            if len(os.listdir(shotPath)) > 0:\n                # print(\"Directory \" + shotPath + \" is not empty\")\n                shot = shot.replace(toReplace, \"\")\n                shotsReturn.append(shot)\n            # else: \n                # print(\"Directory \" + shotPath + \" is empty\")   \n                        \n    # DELETING DUPLICATES #            \n    shotsReturn = list(set(shotsReturn))\n    return shotsReturn\n##################################################################\n##################################################################\n\n##################################################################\n### Returns list with render types.\n###\n### @param rendersPath Path of the project files.\n### @return rendersReturn types of renders in path.\n##################################################################\ndef getRenders(rendersPath):\n\n    rendersReturn = \[]\n    \n    if os.path.isdir(rendersPath):\n        rendersReturn = os.listdir(rendersPath)\n        # print(renders)\n        \n    return rendersReturn\n##################################################################\n##################################################################\n\n\n##################################################################\n### Returns list with render types.\n###\n### @param rendersPath Path of the project files.\n### @return rendersReturn types of renders in path.\n##################################################################\ndef getVersions(versionsPath):\n\n    versionsReturn = \[]\n    \n    if os.path.isdir(versionsPath):\n        versionsReturn = os.listdir(versionsPath)\n        # print(renders)\n    \n    versionsReturn\[:] = \[x for x in versionsReturn if \"zero\" not in x]    \n    return versionsReturn\n##################################################################\n##################################################################\n\nnode = nuke.thisNode()\nknob = nuke.thisKnob()\n\nshow_name = node.knob('helper_show').value()\npath = \"K:/proyectos/\" + show_name + \"/render/shots/\"\n\n\nif knob.name() == 'helper_sequence':    \n    \n    # GETTING SHOTS #\n    ##################### \n    sequence = node.knob('helper_sequence').value()\n\n    sequencesDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\n    shotsPath = path + sequence + \"/\"\n    shotsShow = getShots(sequence, shotsPath)\n    set1 = set(shotsShow)\n    set2 = set(sequencesDelete)\n    shotsShow = list(set1 - set2)\n    shotsShow.sort()\n    node.knob('helper_shot').setValues(shotsShow)\n    node.knob('helper_shot').setValue(shotsShow\[0])\n    shot = node.knob('helper_shot').value()\n    # print(sequence + \" shots -> \" + str(shotsShow))\n    # shotsShow: 103_028A shots -> \['103_028A_0040']\n\n\n    # GETTING RENDER TYPES #\n    ########################\n    rendersPath = path + sequence + \"/\" + sequence + \"_\" + shot + \"/\"\n    rendersShow = getRenders(rendersPath)\n    toDelete = \[\"0000\", \"rnd\", \".DS_Store\", \"Thumbs.db\", \"test.jpg\"]\n    set1 = set(rendersShow)\n    set2 = set(toDelete)\n    rendersShow = list(set1 - set2)\n\n    node.knob('helper_render_type').setValues(rendersShow)\n    if \"hr\" in rendersShow:\n        node.knob('helper_render_type').setValue(\"hr\")\n    else:\n        node.knob('helper_render_type').setValue(rendersShow\[0])\n\n    render = node.knob('helper_render_type').value()\n\n\n    # GETTING VERSIONS #\n    ##################### \n    versionsPath = path + sequence + \"/\" + sequence + \"_\" + shot + \"/\" + render + \"/\"\n    versionsShow = getVersions(versionsPath)\n    toDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\n    set1 = set(versionsShow)\n    set2 = set(toDelete)\n    versionsShow = list(set1 - set2)\n    versionsShow.sort()\n    node.knob('helper_version').setValues(versionsShow)\n    node.knob('helper_version').setValue(versionsShow\[-1])\n\n\nelif knob.name() == 'helper_shot':\n    \n    sequence = node.knob('helper_sequence').value()\n    shot = node.knob('helper_shot').value()    \n    \n    # GETTING RENDER TYPES #\n    ########################\n    rendersPath = path + sequence + \"/\" + sequence + \"_\" + shot + \"/\"\n    rendersShow = getRenders(rendersPath)\n    toDelete = \[\"0000\", \"rnd\", \".DS_Store\", \"Thumbs.db\", \"test.jpg\"]\n    set1 = set(rendersShow)\n    set2 = set(toDelete)\n    rendersShow = list(set1 - set2)\n\n    node.knob('helper_render_type').setValues(rendersShow)\n    if \"hr\" in rendersShow:\n        node.knob('helper_render_type').setValue(\"hr\")\n    else:\n        node.knob('helper_render_type').setValue(rendersShow\[0])\n\n    render = node.knob('helper_render_type').value()\n    \n    \n    # GETTING VERSIONS #\n    ##################### \n    versionsPath = path + sequence + \"/\" + sequence + \"_\" + shot + \"/\" + render + \"/\"\n    versionsShow = getVersions(versionsPath)\n    toDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\n    set1 = set(versionsShow)\n    set2 = set(toDelete)\n    versionsShow = list(set1 - set2)\n    versionsShow.sort()\n    node.knob('helper_version').setValues(versionsShow)\n    node.knob('helper_version').setValue(versionsShow\[-1])\n\nelif knob.name() == 'helper_render_type':\n    \n    sequence = node.knob('helper_sequence').value()\n    shot = node.knob('helper_shot').value()  \n    render = node.knob('helper_render_type').value()  \n\n    # GETTING VERSIONS #\n    ##################### \n    versionsPath = path + sequence + \"/\" + sequence + \"_\" + shot + \"/\" + render + \"/\"\n    versionsShow = getVersions(versionsPath)\n    toDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\n    set1 = set(versionsShow)\n    set2 = set(toDelete)\n    versionsShow = list(set1 - set2)\n    versionsShow.sort()\n    node.knob('helper_version').setValues(versionsShow)\n    node.knob('helper_version').setValue(versionsShow\[-1])\n    \nelif knob.name() == 'godMode':\n    \n    if node.knob('godMode').value():\n        node.knob('helper_show').setEnabled(True)\n    else:\n        node.knob('helper_show').setEnabled(False)"
 tile_color 0x9fffff
 note_font "Verdana Bold Bold"
 note_font_size 55
 addUserKnob {20 SupHelper}
 addUserKnob {1 helper_show l show +DISABLED}
 addUserKnob {22 helper_autofill_show l "<b>Get Show" T "# AUTOFILL SHOW ###########################################################################\n###########################################################################################\nimport nuke, os\n\nnode = nuke.thisNode()\n\nshow_name = os.environ\[\"ER_SHOW\"]\nnode.knob('helper_show').setValue(show_name)\n\nnode.knob(\"helper_autofill\").execute()\n###########################################################################################\n###########################################################################################" +STARTLINE}
 addUserKnob {22 launchDB l "<b>Launch DB Mode" -STARTLINE +INVISIBLE T "from PySide2 import QtWidgets\nfrom dataManagement import assetManager \nimport nuke, os\n \nclass SupHelper (QtWidgets.QMainWindow):\n    \n    listSequences = \[]\n    sequencesCombobox = QtWidgets.QComboBox()\n\n    listShots = \[]\n    shotsCombobox = QtWidgets.QComboBox()\n\n    listShotsFiltered = \[]\n      \n\n    def __init__(self):\n\n        super(SupHelper, self).__init__()\n\n        # WINDOW LAYOUT\n        layout = QtWidgets.QVBoxLayout()\n        self.setWindowTitle('SupHelper - ' + str(os.environ\[\"ER_SHOW\"]))\n        sizeObject = QtWidgets.QDesktopWidget().screenGeometry(-1)\n        self.resize(sizeObject.width()/8, sizeObject.height()/8)\n        # self.resize(sizeObject.width()/8, sizeObject.height()/2)\n        # print(\" Screen size : \"  + str(sizeObject.height()) + \"x\"  + str(sizeObject.width()))\n\n        \n        # SEQUENCES ##########################\n        self.listSequences = self.getData(\"sequence.versions\", \"name\")\n        # print(listShots)\n\n        # SEQUENCES COMBOBOX #################\n        for sequence in self.listSequences:\n            self.sequencesCombobox.addItem(sequence)\n        \n        self.sequencesCombobox.currentTextChanged.connect(self.sequenceChanged)\n        layout.addWidget(self.sequencesCombobox)\n        ######################################\n        ######################################\n        \n        \n        # SHOTS ##############################\n        self.listShots = self.getData(\"shot.versions\", \"name\")\n        # print(listShots)\n\n        sequenceFilter = self.sequencesCombobox.currentText()\n        self.listShotsFiltered = \[i for i in self.listShots if sequenceFilter in i]\n\n        # SHOTS COMBOBOX\n        self.shotsCombobox = QtWidgets.QComboBox()\n\n        for shot in self.listShotsFiltered:\n            self.shotsCombobox.addItem(shot)\n        \n        self.shotsCombobox.currentTextChanged.connect(self.shotChanged)\n        layout.addWidget(self.shotsCombobox)\n        ######################################\n        ######################################\n        \n        \n        # WIDGET CONTAINER\n        widget = QtWidgets.QWidget()\n        widget.setLayout(layout)\n\n\n        # Set the central widget of the Window.\n        self.setCentralWidget(widget)\n\n\n    ##################################################################\n    ### Returns list with data from database.\n    ###\n    ### @param query              Query to search n db.\n    ### @param filter             Filter to data in db.\n    ### @return listData          List with db data.\n    ##################################################################\n    def getData(self, query, filter):\n        \n        # DB PREPARING ########################\n        a = assetManager.asset.Server() \n        server = a.dbServer\n\n        \n         # DATA #################################\n        listData = \[]\n        \n        for i in server.database\[query].find():\n            listData.append(str(i\[filter]))   \n        \n        listData = list(set(listData))\n        listData.sort()\n\n        return listData\n    ##################################################################\n    ##################################################################\n\n    def sequenceChanged(self, s):\n        print(\"SEQUENCE: \", s)\n\n        # SHOTS ##############################\n        listShots = self.getData(\"shot.versions\", \"name\")\n        # print(listShots)\n\n        sequenceFilter = s\n        listShotsFiltered = \[i for i in listShots if sequenceFilter in i]\n\n        # SHOTS COMBOBOX\n        self.shotsCombobox.clear()\n\n        for shot in listShotsFiltered:\n            self.shotsCombobox.addItem(shot)\n        \n        # self.shotsCombobox.currentTextChanged.connect(self.shotChanged)\n        # layout.addWidget(self.shotsCombobox)\n        ######################################\n        ######################################\n    \n    def shotChanged(self, s):\n        print(\"SHOT: \", s)\n       \n\nventana = SupHelper()\nventana.show()"}
 addUserKnob {6 godMode -STARTLINE +INVISIBLE}
 addUserKnob {26 show_separator l "" +STARTLINE}
 addUserKnob {4 helper_sequence l sequence M {"" "" ""}}
 addUserKnob {4 helper_shot l shot M {"" ""}}
 addUserKnob {4 helper_render_type l "render type" M {"" ""}}
 addUserKnob {4 helper_version l version M {"" ""}}
 addUserKnob {22 helper_autofill l "<b>Autofill Data" T "import nuke, os\n\n# print(os.environ\[\"ER_SHOW\"])\n\n# from env_info.v1_1_0 import callbacks\n# callbacks.fillInfo(nuke.thisNode())\n\n##################################################################\n### Returns list with sequences containing renders.\n###\n### @param path Path of the project files.\n### @return sequencesReturn sequences with renders.\n##################################################################\ndef getSequences(path):\n    \n    sequencesDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\n    sequencesReturn = \[]\n\n    if os.path.isdir(path):\n        sequences = os.listdir(path)\n        set1 = set(sequences)\n        set2 = set(sequencesDelete)\n        sequences = list(set1 - set2)\n        # print(sequences)\n        \n        # SEQUENCES #\n        for sequence in sequences:\n            # print(sequence)\n            \n            sequencePath = path + sequence + \"/\"\n            if os.path.isdir(sequencePath):\n                shots = os.listdir(sequencePath)\n                set1 = set(shots)\n                set2 = set(sequencesDelete)\n                shots = list(set1 - set2)\n                # print(shots)\n                \n                # SHOTS #\n                for shot in shots:\n                    # print(shot)\n                    \n                    shotPath = sequencePath + shot + \"/\"\n                    # print(shotPath)\n\n                    if len(os.listdir(shotPath)) > 0:\n                        # print(\"Directory \" + shotPath + \" is not empty\")\n                        sequencesReturn.append(sequence)\n                    # else: \n                        # print(\"Directory \" + shotPath + \" is empty\")   \n                        \n        # DELETING DUPLICATES #            \n        sequencesReturn = list(set(sequencesReturn))\n\n        if \"0000\" in sequencesReturn:\n            sequencesReturn.remove(\"0000\")\n        if \"rnd\" in sequencesReturn:\n            sequencesReturn.remove(\"rnd\")\n        if \".DS_Store\" in sequencesReturn:\n            sequencesReturn.remove(\".DS_Store\")\n        \n        # print(\"sequencesReturn -> \" + str(sequencesReturn))\n        return sequencesReturn\n##################################################################\n##################################################################\n\n\n##################################################################\n### Returns list with shots containing renders.\n###\n### @param sequencePath Path of the project files.\n### @return shotsReturn shots with renders.\n##################################################################\ndef getShots(sequence, sequencePath):\n    \n    toReplace = sequence + \"_\"\n    shotsDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\n    shotsReturn = \[]\n    \n    if os.path.isdir(sequencePath):\n        shots = os.listdir(sequencePath)\n        set1 = set(shots)\n        set2 = set(shotsDelete)\n        shots = list(set1 - set2)\n        # print(shots)\n        \n        # SHOTS #\n        for shot in shots:\n            # print(shot)\n            \n            shotPath = sequencePath + shot + \"/\"\n            if len(os.listdir(shotPath)) > 0:\n                # print(\"Directory \" + shotPath + \" is not empty\")\n                shot = shot.replace(toReplace, \"\")\n                shotsReturn.append(shot)\n            # else: \n                # print(\"Directory \" + shotPath + \" is empty\")   \n                        \n    # DELETING DUPLICATES #            \n    shotsReturn = list(set(shotsReturn))\n    return shotsReturn\n##################################################################\n##################################################################\n\n\n##################################################################\n### Returns list with render types.\n###\n### @param rendersPath Path of the project files.\n### @return rendersReturn types of renders in path.\n##################################################################\ndef getRenders(rendersPath):\n\n    rendersReturn = \[]\n    \n    if os.path.isdir(rendersPath):\n        rendersReturn = os.listdir(rendersPath)\n        # print(renders)\n        \n    return rendersReturn\n##################################################################\n##################################################################\n\n\n##################################################################\n### Returns list with render types.\n###\n### @param rendersPath Path of the project files.\n### @return rendersReturn types of renders in path.\n##################################################################\ndef getVersions(versionsPath):\n\n    versionsReturn = \[]\n    \n    if os.path.isdir(versionsPath):\n        versionsReturn = os.listdir(versionsPath)\n        # print(renders)\n    \n    versionsReturn\[:] = \[x for x in versionsReturn if \"zero\" not in x]    \n    return versionsReturn\n##################################################################\n##################################################################\n\n\nnode = nuke.thisNode()\n# node = nuke.toNode(\"fbSupHelper1\")\n\nshow_name = node.knob('helper_show').value()\npath = \"K:/proyectos/\" + show_name + \"/render/shots/\"\n\n\n# GETTING SEQUENCES # \n#####################\nsequencesDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\nsequencesShow = getSequences(path)\nset1 = set(sequencesShow)\nset2 = set(sequencesDelete)\nsequencesShow = list(set1 - set2)\nsequencesShow.sort()\nnode.knob('helper_sequence').setValues(sequencesShow)\nnode.knob('helper_sequence').setValue(sequencesShow\[0])\nsequence = node.knob('helper_sequence').value()\n# print(sequencesShow)\n# sequencesShow: \['103_028A', '105_036', '105_035', '101_009A', '103_031', '105_038']\n\n\n\n# GETTING SHOTS #\n##################### \nsequencesDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\nshotsPath = path + sequence + \"/\"\nshotsShow = getShots(sequence, shotsPath)\nset1 = set(shotsShow)\nset2 = set(sequencesDelete)\nshotsShow = list(set1 - set2)\nshotsShow.sort()\nnode.knob('helper_shot').setValues(shotsShow)\nnode.knob('helper_shot').setValue(shotsShow\[0])\nshot = node.knob('helper_shot').value()\n# print(sequence + \" shots -> \" + str(shotsShow))\n# shotsShow: 103_028A shots -> \['103_028A_0040']\n\n\n# GETTING RENDER TYPES #\n########################\nrendersPath = path + sequence + \"/\" + sequence + \"_\" + shot + \"/\"\nrendersShow = getRenders(rendersPath)\ntoDelete = \[\"0000\", \"rnd\", \".DS_Store\", \"Thumbs.db\", \"test.jpg\"]\nset1 = set(rendersShow)\nset2 = set(toDelete)\nrendersShow = list(set1 - set2)\n\nnode.knob('helper_render_type').setValues(rendersShow)\nif \"hr\" in rendersShow:\n    node.knob('helper_render_type').setValue(\"hr\")\nelse:\n    node.knob('helper_render_type').setValue(rendersShow\[0])\n\nrender = node.knob('helper_render_type').value()\n\n\n# GETTING VERSIONS #\n##################### \nversionsPath = path + sequence + \"/\" + sequence + \"_\" + shot + \"/\" + render + \"/\"\nversionsShow = getVersions(versionsPath)\ntoDelete = \[\"0000\", \"rnd\", \".DS_Store\"]\nset1 = set(versionsShow)\nset2 = set(toDelete)\nversionsShow = list(set1 - set2)\nversionsShow.sort()\nnode.knob('helper_version').setValues(versionsShow)\nnode.knob('helper_version').setValue(versionsShow\[-1])" +STARTLINE}
 addUserKnob {26 env_separator l "" +STARTLINE}
 addUserKnob {22 comp_vzero_loader l "<b>Load comp + vzero" T "import nuke, os\n\nnode = nuke.thisNode()\n#############################\nroot = nuke.root()\nroot.begin()\n\ncharlie = nuke.createNode('CHECKPOINT_CHARLIE')\n\nnodeDistance = int(node.knob('node_distance').value())\n\nshow_name = node.knob('helper_show').value()\nsequence_name = node.knob('helper_sequence').value()\nshot_name = node.knob('helper_shot').value()\nrender_type_name = node.knob('helper_render_type').value()\nversion_name = node.knob('helper_version').value()\n\n\n# COMP #########\npath = \"K:/proyectos/\" + show_name + \"/render/shots/\" + sequence_name + \"/\"  + sequence_name + \"_\" + shot_name + \"/\" + render_type_name + \"/\" + version_name + \"/\"\n\nfor seq in nuke.getFileNameList(path):\n    readNode = nuke.createNode('Read')\n    readNode.knob('file').fromUserText(path + seq)\n    \nreadNode.setXpos(node.xpos()+(nodeDistance*3))    \ncharlie.setInput(0, readNode)\n\n\n# VZERO#########\npath = \"K:/proyectos/\" + show_name + \"/render/shots/\" + sequence_name + \"/\"  + sequence_name + \"_\" + shot_name + \"/\" + render_type_name + \"/\"\n\nvzerosReturn = \[]\n    \nif os.path.isdir(path):\n    vzerosReturn = os.listdir(path)\n\nvzerosReturn\[:] = \[x for x in vzerosReturn if \"comp\" not in x]   \n\nlastVzero = vzerosReturn\[-1]\n\nfullPath = path + lastVzero + \"/\"\n\nnuke.message(\"LOADING:<br>COMP: \" + path + \"<br><br>VZERO: \" + fullPath)\n\nfor seq in nuke.getFileNameList(fullPath):\n    readNode = nuke.createNode('Read')\n    readNode.knob('file').fromUserText(fullPath + seq)\n\nreadNode.setXpos(node.xpos()+(nodeDistance*4))    \ncharlie.setInput(1, readNode)\n\nroot.end()\n#############################" +STARTLINE}
 addUserKnob {22 comp_loader l "<b>Load comp" -STARTLINE T "import nuke, os\n\nnode = nuke.thisNode()\n#############################\nroot = nuke.root()\nroot.begin()\ncharlie = nuke.createNode('CHECKPOINT_CHARLIE')\nroot.end()\n#############################\n\nnodeDistance = int(node.knob('node_distance').value())\n\nshow_name = node.knob('helper_show').value()\nsequence_name = node.knob('helper_sequence').value()\nshot_name = node.knob('helper_shot').value()\nrender_type_name = node.knob('helper_render_type').value()\nversion_name = node.knob('helper_version').value()\n\n\n# COMP #########\npath = \"K:/proyectos/\" + show_name + \"/render/shots/\" + sequence_name + \"/\"  + sequence_name + \"_\" + shot_name + \"/\" + render_type_name + \"/\" + version_name + \"/\"\n\nfor seq in nuke.getFileNameList(path):\n    readNode = nuke.createNode('Read')\n    readNode.knob('file').fromUserText(path + seq)\n    \nnuke.delete(charlie)"}
 addUserKnob {22 vzero_loader l "<b>Load vzero" -STARTLINE T "import nuke, os\n\nnode = nuke.thisNode()\n\n#############################\nroot = nuke.root()\nroot.begin()\n\n\nnodeDistance = int(node.knob('node_distance').value())\n\nshow_name = node.knob('helper_show').value()\nsequence_name = node.knob('helper_sequence').value()\nshot_name = node.knob('helper_shot').value()\nrender_type_name = node.knob('helper_render_type').value()\nversion_name = node.knob('helper_version').value()\n\n\n# VZERO #########\npath = \"K:/proyectos/\" + show_name + \"/render/shots/\" + sequence_name + \"/\"  + sequence_name + \"_\" + shot_name + \"/\" + render_type_name + \"/\"\n\nvzerosReturn = \[]\n    \nif os.path.isdir(path):\n    vzerosReturn = os.listdir(path)\n\n\nvzerosReturn\[:] = \[x for x in vzerosReturn if \"comp\" not in x]   \nlastVzero = vzerosReturn\[-1]\nfullPath = path + lastVzero + \"/\"\n\nnuke.message(\"LOADING: \" + fullPath)\n\nfor seq in nuke.getFileNameList(fullPath):\n    readNode = nuke.createNode('Read')\n    readNode.knob('file').fromUserText(fullPath + seq)\n    \nroot.end()\n#############################"}
 addUserKnob {22 vref_loader l "<b>Load vref" -STARTLINE T "import nuke, os\n\nnode = nuke.thisNode()\n\n#############################\nroot = nuke.root()\nroot.begin()\n\n\nnodeDistance = int(node.knob('node_distance').value())\n\nshow_name = node.knob('helper_show').value()\nsequence_name = node.knob('helper_sequence').value()\nshot_name = node.knob('helper_shot').value()\nrender_type_name = node.knob('helper_render_type').value()\nversion_name = node.knob('helper_version').value()\n\n\n# COMP #########\nvrefPath = \"K:/proyectos/\" + show_name + \"/editorial/offlines/vrefshots/shots/\" + sequence_name + \"/\"  + sequence_name + \"_\" + shot_name + \"/\"\n\nif os.path.isdir(vrefPath):\n    vrefs = os.listdir(vrefPath)\n\nlastVref = vrefs\[-1]\nfullPath = vrefPath + lastVref + \"/jpg/\"\n\nnuke.message(\"LOADING: \" + fullPath)\n\nfor seq in nuke.getFileNameList(fullPath):\n    readNode = nuke.createNode('Read')\n    readNode.knob('file').fromUserText(fullPath + seq)\n    \n\nroot.end()\n#############################"}
 addUserKnob {3 node_distance l nodeDistance +INVISIBLE}
 node_distance 200
 addUserKnob {26 copy_separator l "" +STARTLINE}
 addUserKnob {26 nodeName l "" +STARTLINE T " <b>fbSupHelper v1.0</b>"}
 addUserKnob {26 copyName l "" +STARTLINE T "Fèlix Bueno Casas, David Lozano Pascual ©"}
 addUserKnob {26 ranxet l "" +STARTLINE T "<br>\n<br>\n<br>\n<img width=250 src=\"H:\\tmp\\david.lozano\\lp\\fb\\fbSupHelper/El-Ranchito-Combination-Mark-Landscape-White-RGB-1.svg\">"}
}
 Output {
  inputs 0
  name Output1
  xpos 0
  ypos 300
 }
end_group
